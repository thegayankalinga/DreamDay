@using DreamDay.ViewModels
@model Checklist

@{
    ViewBag.Title = $"Items for {Model.Title}";
    Layout = "_Layout";
}

<div class="container mt-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold">@Model.Title - Checklist Items</h2>
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-1"></i> Back to Checklists
        </a>
    </div>

    <!-- Checklist Summary & Toggle -->
    <div class="row mb-4">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm border-0">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-clipboard-check me-2"></i>Checklist Summary
                        </h5>
                        <div class="btn-group" role="group" aria-label="View Toggle">
                            <button type="button" class="btn btn-outline-primary" id="cardViewBtn">
                                <i class="bi bi-grid-3x3-gap-fill me-1"></i> Card View
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="tableViewBtn">
                                <i class="bi bi-table me-1"></i> Table View
                            </button>
                        </div>
                    </div>
                    <p class="card-text mb-1"><strong>Created:</strong> @Model.CreatedDate.ToShortDateString()</p>
                    <p class="card-text">
                        <strong>Completion Status:</strong>
                        @if (Model.Items?.Any() == true)
                        {
                            var completedCount = Model.Items.Count(i => i.IsCompleted);
                            var totalCount = Model.Items.Count;
                            var completionPercentage = (double)completedCount / totalCount * 100;

                            <span>@completedCount of @totalCount items completed (@completionPercentage.ToString("0.0")%)</span>
                    <div class="progress mt-2">
                        <div class="progress-bar progress-bar-striped bg-primary" role="progressbar"
                             style="width: @completionPercentage%;" aria-valuenow="@completionPercentage"
                             aria-valuemin="0" aria-valuemax="100">
                            @completionPercentage.ToString("0.0")%
                        </div>
                    </div>
                    }
                    else
                    {
                        <span>No items yet</span>
                    }
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Alert for no items -->
    @if (Model.Items == null || !Model.Items.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-1"></i> This checklist doesn't have any items yet. Add your first item to get started!
        </div>
    }

    <!-- Card View -->
    <div id="cardView" class="row g-4">
        @if (Model.Items?.Any() == true)
        {
            foreach (var item in Model.Items)
            {
                <div class="col-md-4">
                    @await Html.PartialAsync("_ViewItem", item)
                </div>
            }
        }

        <!-- Create New Item Card (for both views) -->
        <div class="col-md-4">
            <div class="card h-100 shadow-sm border-primary">
                <div class="card-body">
                    <h6 class="card-title text-primary mb-3">
                        <i class="bi bi-plus-circle me-1"></i> Add New Item
                    </h6>
                    @await Html.PartialAsync("_CreateItem", new CreateItemViewModel { ChecklistId = Model.Id })
                </div>
            </div>
        </div>
    </div>

    <!-- Table View -->
    <div id="tableView" class="d-none mt-4">
        @if (Model.Items?.Any() == true)
        {
            <table class="table table-striped table-hover align-middle">
                <thead class="table-light">
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Due Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td>@item.Title</td>
                        <td>@item.Description</td>
                        <td>@item.DueDate.ToString()</td>
                        <td>
                            @if (item.IsCompleted)
                            {
                                <span class="badge bg-success">Completed</span>
                            }
                            else
                            {
                                <span class="badge bg-warning text-dark">Pending</span>
                            }
                        </td>
                        <td>
                            <a asp-action="EditItem" asp-route-id="@item.Id" class="btn btn-sm btn-outline-secondary">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <form asp-action="DeleteItem" asp-controller="Couple" asp-route-id="@item.Id" method="post"
                                  onsubmit="return confirm('Are you sure you want to delete this item?');" class="d-inline">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </form>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }

        <!-- Add Item Card at bottom of Table View -->
        <div class="mt-4 col-md-6 col-lg-4">
            <div class="card h-100 shadow-sm border-primary">
                <div class="card-body">
                    <h6 class="card-title text-primary mb-3">
                        <i class="bi bi-plus-circle me-1"></i> Add New Item
                    </h6>
                    @await Html.PartialAsync("_CreateItem", new CreateItemViewModel { ChecklistId = Model.Id })
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const cardView = document.getElementById('cardView');
        const tableView = document.getElementById('tableView');
        const cardBtn = document.getElementById('cardViewBtn');
        const tableBtn = document.getElementById('tableViewBtn');

        function setView(view) {
            if (view === 'card') {
                cardView.classList.remove('d-none');
                tableView.classList.add('d-none');
                cardBtn.classList.replace('btn-outline-primary', 'btn-primary');
                tableBtn.classList.replace('btn-secondary', 'btn-outline-secondary');
                localStorage.setItem('viewMode', 'card');
            } else {
                tableView.classList.remove('d-none');
                cardView.classList.add('d-none');
                tableBtn.classList.replace('btn-outline-secondary', 'btn-secondary');
                cardBtn.classList.replace('btn-primary', 'btn-outline-primary');
                localStorage.setItem('viewMode', 'table');
            }
        }

        cardBtn.addEventListener('click', () => setView('card'));
        tableBtn.addEventListener('click', () => setView('table'));

        // Restore previous view on page load
        window.addEventListener('DOMContentLoaded', () => {
            const savedView = localStorage.getItem('viewMode') || 'card';
            setView(savedView);
        });
    </script>
}
